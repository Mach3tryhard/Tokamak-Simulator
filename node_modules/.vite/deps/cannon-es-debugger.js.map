{
  "version": 3,
  "sources": ["../../cannon-es-debugger/dist/cannon-es-debugger.js"],
  "sourcesContent": ["import { Vec3, Quaternion, Shape } from 'cannon-es';\r\nimport { MeshBasicMaterial, SphereGeometry, BoxGeometry, PlaneGeometry, Mesh, CylinderGeometry, BufferGeometry, Float32BufferAttribute } from 'three';\r\n\r\nfunction CannonDebugger(scene, world, _temp) {\r\n  let {\r\n    color = 0x00ff00,\r\n    scale = 1,\r\n    onInit,\r\n    onUpdate\r\n  } = _temp === void 0 ? {} : _temp;\r\n  const _meshes = [];\r\n\r\n  const _material = new MeshBasicMaterial({\r\n    color: color != null ? color : 0x00ff00,\r\n    wireframe: true\r\n  });\r\n\r\n  const _tempVec0 = new Vec3();\r\n\r\n  const _tempVec1 = new Vec3();\r\n\r\n  const _tempVec2 = new Vec3();\r\n\r\n  const _tempQuat0 = new Quaternion();\r\n\r\n  const _sphereGeometry = new SphereGeometry(1);\r\n\r\n  const _boxGeometry = new BoxGeometry(1, 1, 1);\r\n\r\n  const _planeGeometry = new PlaneGeometry(10, 10, 10, 10); // Move the planeGeometry forward a little bit to prevent z-fighting\r\n\r\n\r\n  _planeGeometry.translate(0, 0, 0.0001);\r\n\r\n  function createConvexPolyhedronGeometry(shape) {\r\n    const geometry = new BufferGeometry(); // Add vertices\r\n\r\n    const positions = [];\r\n\r\n    for (let i = 0; i < shape.vertices.length; i++) {\r\n      const vertex = shape.vertices[i];\r\n      positions.push(vertex.x, vertex.y, vertex.z);\r\n    }\r\n\r\n    geometry.setAttribute('position', new Float32BufferAttribute(positions, 3)); // Add faces\r\n\r\n    const indices = [];\r\n\r\n    for (let i = 0; i < shape.faces.length; i++) {\r\n      const face = shape.faces[i];\r\n      const a = face[0];\r\n\r\n      for (let j = 1; j < face.length - 1; j++) {\r\n        const b = face[j];\r\n        const c = face[j + 1];\r\n        indices.push(a, b, c);\r\n      }\r\n    }\r\n\r\n    geometry.setIndex(indices);\r\n    geometry.computeBoundingSphere();\r\n    geometry.computeVertexNormals();\r\n    return geometry;\r\n  }\r\n\r\n  function createTrimeshGeometry(shape) {\r\n    const geometry = new BufferGeometry();\r\n    const positions = [];\r\n    const v0 = _tempVec0;\r\n    const v1 = _tempVec1;\r\n    const v2 = _tempVec2;\r\n\r\n    for (let i = 0; i < shape.indices.length / 3; i++) {\r\n      shape.getTriangleVertices(i, v0, v1, v2);\r\n      positions.push(v0.x, v0.y, v0.z);\r\n      positions.push(v1.x, v1.y, v1.z);\r\n      positions.push(v2.x, v2.y, v2.z);\r\n    }\r\n\r\n    geometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\r\n    geometry.computeBoundingSphere();\r\n    geometry.computeVertexNormals();\r\n    return geometry;\r\n  }\r\n\r\n  function createHeightfieldGeometry(shape) {\r\n    const geometry = new BufferGeometry();\r\n    const s = shape.elementSize || 1; // assumes square heightfield, else i*x, j*y\r\n\r\n    const positions = shape.data.flatMap((row, i) => row.flatMap((z, j) => [i * s, j * s, z]));\r\n    const indices = [];\r\n\r\n    for (let xi = 0; xi < shape.data.length - 1; xi++) {\r\n      for (let yi = 0; yi < shape.data[xi].length - 1; yi++) {\r\n        const stride = shape.data[xi].length;\r\n        const index = xi * stride + yi;\r\n        indices.push(index + 1, index + stride, index + stride + 1);\r\n        indices.push(index + stride, index + 1, index);\r\n      }\r\n    }\r\n\r\n    geometry.setIndex(indices);\r\n    geometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\r\n    geometry.computeBoundingSphere();\r\n    geometry.computeVertexNormals();\r\n    return geometry;\r\n  }\r\n\r\n  function createMesh(shape) {\r\n    let mesh = new Mesh();\r\n    const {\r\n      SPHERE,\r\n      BOX,\r\n      PLANE,\r\n      CYLINDER,\r\n      CONVEXPOLYHEDRON,\r\n      TRIMESH,\r\n      HEIGHTFIELD\r\n    } = Shape.types;\r\n\r\n    switch (shape.type) {\r\n      case SPHERE:\r\n        {\r\n          mesh = new Mesh(_sphereGeometry, _material);\r\n          break;\r\n        }\r\n\r\n      case BOX:\r\n        {\r\n          mesh = new Mesh(_boxGeometry, _material);\r\n          break;\r\n        }\r\n\r\n      case PLANE:\r\n        {\r\n          mesh = new Mesh(_planeGeometry, _material);\r\n          break;\r\n        }\r\n\r\n      case CYLINDER:\r\n        {\r\n          const geometry = new CylinderGeometry(shape.radiusTop, shape.radiusBottom, shape.height, shape.numSegments);\r\n          mesh = new Mesh(geometry, _material);\r\n          shape.geometryId = geometry.id;\r\n          break;\r\n        }\r\n\r\n      case CONVEXPOLYHEDRON:\r\n        {\r\n          const geometry = createConvexPolyhedronGeometry(shape);\r\n          mesh = new Mesh(geometry, _material);\r\n          shape.geometryId = geometry.id;\r\n          break;\r\n        }\r\n\r\n      case TRIMESH:\r\n        {\r\n          const geometry = createTrimeshGeometry(shape);\r\n          mesh = new Mesh(geometry, _material);\r\n          shape.geometryId = geometry.id;\r\n          break;\r\n        }\r\n\r\n      case HEIGHTFIELD:\r\n        {\r\n          const geometry = createHeightfieldGeometry(shape);\r\n          mesh = new Mesh(geometry, _material);\r\n          shape.geometryId = geometry.id;\r\n          break;\r\n        }\r\n    }\r\n\r\n    scene.add(mesh);\r\n    return mesh;\r\n  }\r\n\r\n  function scaleMesh(mesh, shape) {\r\n    const {\r\n      SPHERE,\r\n      BOX,\r\n      PLANE,\r\n      CYLINDER,\r\n      CONVEXPOLYHEDRON,\r\n      TRIMESH,\r\n      HEIGHTFIELD\r\n    } = Shape.types;\r\n\r\n    switch (shape.type) {\r\n      case SPHERE:\r\n        {\r\n          const {\r\n            radius\r\n          } = shape;\r\n          mesh.scale.set(radius * scale, radius * scale, radius * scale);\r\n          break;\r\n        }\r\n\r\n      case BOX:\r\n        {\r\n          mesh.scale.copy(shape.halfExtents);\r\n          mesh.scale.multiplyScalar(2 * scale);\r\n          break;\r\n        }\r\n\r\n      case PLANE:\r\n        {\r\n          break;\r\n        }\r\n\r\n      case CYLINDER:\r\n        {\r\n          mesh.scale.set(1 * scale, 1 * scale, 1 * scale);\r\n          break;\r\n        }\r\n\r\n      case CONVEXPOLYHEDRON:\r\n        {\r\n          mesh.scale.set(1 * scale, 1 * scale, 1 * scale);\r\n          break;\r\n        }\r\n\r\n      case TRIMESH:\r\n        {\r\n          mesh.scale.copy(shape.scale).multiplyScalar(scale);\r\n          break;\r\n        }\r\n\r\n      case HEIGHTFIELD:\r\n        {\r\n          mesh.scale.set(1 * scale, 1 * scale, 1 * scale);\r\n          break;\r\n        }\r\n    }\r\n  }\r\n\r\n  function typeMatch(mesh, shape) {\r\n    if (!mesh) return false;\r\n    const {\r\n      geometry\r\n    } = mesh;\r\n    return geometry instanceof SphereGeometry && shape.type === Shape.types.SPHERE || geometry instanceof BoxGeometry && shape.type === Shape.types.BOX || geometry instanceof PlaneGeometry && shape.type === Shape.types.PLANE || geometry.id === shape.geometryId && shape.type === Shape.types.CYLINDER || geometry.id === shape.geometryId && shape.type === Shape.types.CONVEXPOLYHEDRON || geometry.id === shape.geometryId && shape.type === Shape.types.TRIMESH || geometry.id === shape.geometryId && shape.type === Shape.types.HEIGHTFIELD;\r\n  }\r\n\r\n  function updateMesh(index, shape) {\r\n    let mesh = _meshes[index];\r\n    let didCreateNewMesh = false;\r\n\r\n    if (!typeMatch(mesh, shape)) {\r\n      if (mesh) scene.remove(mesh);\r\n      _meshes[index] = mesh = createMesh(shape);\r\n      didCreateNewMesh = true;\r\n    }\r\n\r\n    scaleMesh(mesh, shape);\r\n    return didCreateNewMesh;\r\n  }\r\n\r\n  function update() {\r\n    const meshes = _meshes;\r\n    const shapeWorldPosition = _tempVec0;\r\n    const shapeWorldQuaternion = _tempQuat0;\r\n    let meshIndex = 0;\r\n\r\n    for (const body of world.bodies) {\r\n      for (let i = 0; i !== body.shapes.length; i++) {\r\n        const shape = body.shapes[i];\r\n        const didCreateNewMesh = updateMesh(meshIndex, shape);\r\n        const mesh = meshes[meshIndex];\r\n\r\n        if (mesh) {\r\n          // Get world position\r\n          body.quaternion.vmult(body.shapeOffsets[i], shapeWorldPosition);\r\n          body.position.vadd(shapeWorldPosition, shapeWorldPosition); // Get world quaternion\r\n\r\n          body.quaternion.mult(body.shapeOrientations[i], shapeWorldQuaternion); // Copy to meshes\r\n\r\n          mesh.position.copy(shapeWorldPosition);\r\n          mesh.quaternion.copy(shapeWorldQuaternion);\r\n          if (didCreateNewMesh && onInit instanceof Function) onInit(body, mesh, shape);\r\n          if (!didCreateNewMesh && onUpdate instanceof Function) onUpdate(body, mesh, shape);\r\n        }\r\n\r\n        meshIndex++;\r\n      }\r\n    }\r\n\r\n    for (let i = meshIndex; i < meshes.length; i++) {\r\n      const mesh = meshes[i];\r\n      if (mesh) scene.remove(mesh);\r\n    }\r\n\r\n    meshes.length = meshIndex;\r\n  }\r\n\r\n  return {\r\n    update\r\n  };\r\n}\r\n\r\nexport { CannonDebugger as default };\r\n"],
  "mappings": "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",
  "names": []
}
